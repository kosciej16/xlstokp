import codecs
import csv
import ConfigParser
import unicodedata
import operator
import os
import sys
import time


included_cols={}
mapped_cols={}
config = ConfigParser.RawConfigParser()
col_names = []
files = {}

def strip_accents(s):
       return ''.join(c for c in unicodedata.normalize('NFD', s)
                                 if unicodedata.category(c) != 'Mn')

def get_col_by_name(col, col_names):
    if col in col_names:
        return col_names.index(col)
    return -1


def get_cols(col_names):
    cols = config.items('columns')
    for (key, col) in cols:
        if get_col_by_name(col, col_names) != -1:
            included_cols[key] = get_col_by_name(col, col_names)

def filter(row):
    pr = config.items('Project')
    pe = config.items('Person')
    b = False
    for (k, _) in pe:
        if k in row:
            b = True
    for (k, _) in pr:
        if k in row:
            return b
    return False

def map(content):
    new_content = []
    for row in content:
        p = config.items('Project') + config.items('Person')
        for (k, v) in p:
            if k in row:
                index = row.index(k)
                row[index] = v
                new_content.append(row)
    return new_content

def extract_date(row, fmt='%d.%m.%Y', col_name='date'):
    return time.strftime(fmt, row[mapped_cols[col_name]])

def extract_project(row, col_name='project'):
    project = row[mapped_cols[col_name]]
    return config.get('Project', project)

def extract_time(row, col_name='time'):
    return row[mapped_cols[col_name]]

def extract_description(row, col_name='description'):
    return row[mapped_cols[col_name]]

def extract_person(row, full_name=False, col_name='person'):
    person = row[mapped_cols[col_name]]
    mapped_person = config.get('Person', person)
    if full_name:
        return (person, mapped_person)
    return mapped_person

def extract_name(row):
    date = extract_date(row, '%Y.%m')
    project_name = extract_project(row)
    return date + '.' + project_name + '.kp'

def create_kp_event(row):
    date = extract_date(row)
    time = extract_time(row)
    person = extract_person(row)
    description = extract_description(row)
    return '\n\n' + date + ' -- ' + round_time(time) + 'h -- ' + person + '\n' + description

def round_time(time):
    f = float(time.replace(',','.'))
    return str(round(f, 2)).replace('.',',')

def create_or_get_file(row):
    name = extract_name(row)
    person = extract_person(row, True)
    path = os.path.join(person[0], name)
    if not path in files:
        f = open(path, 'w')
        f.write("#   generated by script, if something is wrong, mail to: kkominek@7bulls.com\n")
        f.write('* ' + extract_project(row) + ': (' + extract_date(row, '%Y.%m' ) + ') *\n')
        f.write(person[1] + ': ' + person[0])
        files[path] = f
    else:
        f = files[path]
    return f

def convert_to_kp(content):
    for i in range(0, len(content)):
        content[i][0] = time.strptime(content[i][0], "%Y-%m-%d %H:%M")
    s = sorted(content, key=operator.itemgetter(0))
    for (key,i) in (zip(included_cols.keys(), range(0,len(included_cols)))):
        mapped_cols[key] = i
    for row in s:
        f = create_or_get_file(row)
        f.write(create_kp_event(row))
    return True

def get_content(filename):
    with open(filename, 'rb') as f:
        content = []
        reader = csv.reader(f)
        get_cols(reader.next())
        for row in reader:
            r = list((strip_accents(row[i].decode('utf-8')).encode()) for i in included_cols.values())
            if filter(r):
                content.append(r)
        return content

def create_dirs(path=''):
    p = config.items('Person')
    for (k,_) in p:
        if not os.path.exists(path + k):
            os.makedirs(path + k)

def main():
    config.optionxform = str
    if not os.path.isfile(sys.argv[2]):
        print sys.argv[2]
        print 'Config file does not exist'
        return
    config.read(sys.argv[2])
    content = get_content(sys.argv[1])
    create_dirs()
    #content = map(content)
    convert_to_kp(content)
    for f in files.values():
        f.close()

if __name__ == "__main__":
    main()
